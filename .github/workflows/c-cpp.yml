name: C++ Auto Build & Test

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    name: Build & Run All C++ Files
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up C++ environment
        run: |
          sudo apt update -y
          sudo apt install -y g++ build-essential

      # Step 1: Syntax check (no linking)
      - name: Compile all C++ files (syntax only)
        run: |
          echo "🧩 Checking syntax of all .cpp files..."
          for file in $(find . -type f -name "*.cpp"); do
            echo "🔹 Checking $file"
            g++ -std=c++20 -Wall -Wextra -fsyntax-only "$file"
          done
          echo "✅ Syntax check passed."

      # Step 2: Build + Run only main() programs (safely)
      - name: Build and safely run files with main()
        run: |
          echo "⚙️ Searching for files with main()..."
          mkdir -p build
          MAIN_FILES=$(grep -rl "int[[:space:]]\+main" --include="*.cpp" . || true)
          if [ -z "$MAIN_FILES" ]; then
            echo "ℹ️ No main() files found. Skipping."
            exit 0
          fi

          for file in $MAIN_FILES; do
            name=$(basename "$file" .cpp)
            echo "🔧 Compiling $file ..."
            g++ -std=c++20 -Wall -Wextra -O2 "$file" -o "build/$name.out" || exit 1

            echo "🧠 Detecting interactivity..."
            if grep -qE "cin|getline|scanf|std::cin" "$file"; then
              echo "⚠️ $file uses input — skipping runtime to avoid hang."
              continue
            fi

            echo "🚀 Running $name.out (max 3s)"
            timeout 3s "./build/$name.out" > build/"$name"_output.txt 2>&1 \
              && echo "✅ $file executed successfully." \
              || echo "⏳ Skipped or timed out (possible loop/menu)."
          done

          echo "🧾 Run complete — outputs saved in build/ folder."
